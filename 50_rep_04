#!/usr/bin/env bash
set +x
set -u
set -o pipefail

src_file=$1
res_file=$2
res_dir=`dirname $( dirname "$res_file")`

#>: Склейка ежедневных отчетов (за некоторый период):
rep="50_rep_03.gz"
#> Этот отчет ожидает, что будут когда-нибудь данные за все желаемые дни, а если их нет, значит нужно выйти и попытать счастья как-нибудь потом.
#> По этой причине, он не может ориентироваться лишь на имеющиеся данные и по ним делать отчет, а должен заранее решить сколько ему надо.

#>: Из конфа: склеиваются данные за период (мес):
period=`conf conf.txt store_period` 
#>: за N дней (перевести месяцы в дни):
n=$(( $period*30 )) # не перебрщи! лучше меньше чем больше иначе не найдет файла.
#> в течение max_expire дней (из конфа) от начала периода часто может не быть 40/.../leads_channels потому что ему самому требуется для анализа столько дней. 
#>: поэтому уменьшаем количество дней в желаемом периоде на количество этих дней. 
n=$(( $n - `conf conf.txt max_expire_days` ))


#>> Помимо просто склейки, отчет добавляет от себя колонку ДАТА,
#>> и две колонки КАТЕГОРИЯ из справочника категорий
#> имя файла справочника категорий: 
site2category="./site2category.txt"

set +u; 
    light_days=$3; # - признак режима "light" 
set -u

if [ ! -z "$light_days" ];then
    #> "light"-версия отчета ждет не весь период store_period, а только batch_max_days. См. конф. Сделано для ускорения пересчета данных после удаления.
    n=$light_days
fi        

src_day=`fn2days $src_file`

#> Этот отчет не нужно считать на старые рассчетные дни (например больше недели-двух назад). Все смотрят только свежее.
#> (Не путать с периодом за который склеиваются данные).
#> Поэтому, если рассчетный день старее недели, выходим (и не захламлям лог ошибками)
[[ -z `echo "$src_day" | only --younger=14days` ]] && exit 3

days=`days $src_day -n=-$n`
days="$days $src_day" # в конец списка добавляем src_day, он 1)завершает сегодняшним днем, 2)не дает nomissing разрешить не свежие данные.
ff=`echo "$days" | files "$res_dir/%F/50_rep_03.gz"`
needff=$ff
ff=`echo $needff | only -all -e` # только если все перечисленные файлы существуют
notfound=$?
if [[ -z "$ff" ]]; then
    if [[ $notfound -lt 3 ]];then
	echo "Not exists $notfound files from list: $needff">&2
    fi
    exit 3
fi    	
#[[ -z "$ff" ]] && exit 3 # выход 3 не записывается в лог

#>? пока не решил писать в лог или нет
#chk "$ff" "Files for report. Possible missing some days?. ( script $0, line $LINENO )" || exit 3 

# Format 50_rep_03.gz:
# 82185*vtb24.ru*auto*all.auto.ru*221*254*10*20*33000
#input="sid domain chan mvaldom pereh_uniqs pereh_uids leads_uniq leads_uids chsum"

perl -Mstrict -e'
 $\="\n";
 my @ff = @ARGV;
 for my $f (@ff){
    open F, "zcat $f |" or die $!;
    my ($date) = $f=~/(\d\d\d\d-\d\d-\d\d)/;
    while (<F>){
	chomp;
	my @f = split /\*/, $_, -1; # нужны все поля и если нет данных то 0
	$#f = 8; # принудительно указываем номер последнего индекса, т.к. на входе кол-во полей может плавать
	print join( "*", $date, map {$_||0} @f);
    }
 }
' $ff | addf -k=3 -df="$site2category" -dt=" " -dadd=2,3

#>> Выход:
#>> дата  sid  домен  categ1  categ2  канал  расшифровка_канала  уник_переходов переходов уник_лидов лидов сумма_чека




